
/* HashTable
 *
 * underlying data structure -> hashtable
 * insertion order is not preserved, insertion is based on hash code of keys, generated by the hashing fn.
 * Heterogeneous objects are allowed for both keys and values
 * null is not allowed as key
 * no duplicate keys
 * Every method inside Hashtable is Synchronized, hence Hashtable object is thread safe
 *
 *
 * Constructors:
 *          1. Hashtable h = new Hashtable(); -> default capacity is 11
 *          2. Hashtable h = new Hashtable(int initialCapacity);
 *          3. Hashtable h = new Hashtable(int initialCapacity, float fillRatio);
 *          4. Hashtable h = new Hashtable(Map m);
 */


import java.util.Hashtable;

public class MapDemo {
    public static void main(String[] args) {

        Hashtable<Object, Object> hashtable = new Hashtable<>();

        hashtable.put(new Temp(5), "a");
        hashtable.put(new Temp(2), "b");
        hashtable.put(new Temp(6), "c");
        hashtable.put(new Temp(15), "d");
        // hashtable.put(new Temp(23), "e");
        hashtable.put(new Temp(16), "f");
        hashtable.put(new Temp(9), "x");
        hashtable.put(new Temp(10), "y");

        System.out.println("hashtable = " + hashtable); // {10=y, 9=x, 6=c, 16=f, 5=a, 15=d, 2=b}

    }
}


class Temp {

    int i;

    public Temp(int i) {
        this.i = i;
    }

    public int hashCode() {
        return i; // same as i % 11, because the default size is 11
    }

    public String toString() {
        return i + "";
    }

}

